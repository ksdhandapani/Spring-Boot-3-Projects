spring.application.name=ms-config-server

# Want to activate the native profile of Spring Cloud Config Server - This will work only for classpath and file system
#spring.profiles.active=native

# Want to activate the native profile of Spring Cloud Config Server - This will work only for reading config from git
spring.profiles.active=git

# The location where our properties are stored - Reading configuration from classpath
#spring.cloud.config.server.native.search-locations=classpath:/config

# The location where our properties are stored - Reading configuration from a File System
#spring.cloud.config.server.native.search-locations=file:///C://Users//sudha//Documents//Microservices_Configuration_Files

# Repository URL
spring.cloud.config.server.git.uri=https://github.com/ksdhandapani/microservices-config-server-configuration-source.git
# Default Branch
spring.cloud.config.server.git.default-label=main
# Config server will wait only for 5 seconds, if it is unable to connect within 5 seconds, it will throw an error
spring.cloud.config.server.git.timeout=5
# Clone the repository during the start up of config server. If it is false, the cloning of the repo will happen only when the very first request comes to your config server 
spring.cloud.config.server.git.clone-on-start=true
# To get latest changes always (During every restart)
spring.cloud.config.server.git.force-pull=true

encrypt.key=A74FCYFA97ADFADJJK45CH48CHFAR

server.port=8071

management.endpoints.web.exposure.include=*

management.health.readiness-state.enabled=true
management.health.liveness-state.enabled=true
management.endpoint.health.probes.enabled=true

spring.rabbitmq.host=localhost # It should be the service name, when you run it using docker
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest


